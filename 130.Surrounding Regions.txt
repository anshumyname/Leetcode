class Solution {
public:
    int m,n;
    void solve(vector<vector<char>>& board) {
    m=board.size();
        if(!m) return;
        n=board[0].size();
       vector<vector<bool>> v(m,vector<bool> (n,false));
        int i=0,j=0;
        for(int i=0;i<m;i++)
                if(board[i][0]=='O' && !v[i][0])
                    call(i,0,v,board);
        for(int j=0;j<n;j++)
                if(board[0][j]=='O' && !v[0][j])
                    call(0,j,v,board);
        for(int j=0;j<n;j++)
                if(board[m-1][j]=='O' && !v[m-1][j])
                    call(m-1,j,v,board);
        for(int i=0;i<m;i++)
                if(board[i][n-1]=='O' && !v[i][n-1])
                    call(i,n-1,v,board);  
        
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(!v[i][j] && board[i][j]=='O')
                    board[i][j]='X';
                if(board[i][j]=='A')
                    board[i][j]='O';
            }
        }
    }
    
    void call(int x, int y,vector<vector<bool>>& v,vector<vector<char>>& board){
        if(!valid(x,y)) return;
        if(v[x][y]) return;
        
        v[x][y]=true;
        if(board[x][y]=='X') return ;
        board[x][y]='A';
        
        call(x,y+1,v,board);
        call(x+1,y,v,board);
        call(x-1,y,v,board);
        call(x,y-1,v,board);
    }
    
    bool valid(int x,int y){
        return (x>=0 && x<m) && (y>=0 && y<n);
    }
};