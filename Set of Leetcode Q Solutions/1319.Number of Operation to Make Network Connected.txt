class Solution {
public:
    int extra=0;
    int makeConnected(int n, vector<vector<int>>& connections) {
        vector<int> vis(n,0);
        vector<vector<int>> gf(n);
        if(connections.size()<n-1) return -1;
        for(auto c:connections){
            gf[c[0]].push_back(c[1]);
            gf[c[1]].push_back(c[0]);
        }
        int c=0;
        for(int i=0;i<n;i++){
            if(!vis[i]){
                c++;
                dfs(i,vis,gf);
            }
        }
        
        return c-1;
    }
    
    void dfs(int i,vector<int>& vis,vector<vector<int>>& gf){
        if(vis[i]){
            return;
        }
        vis[i]=1;
        for(auto nei: gf[i]){
            if(vis[nei]) extra++;
            else
                dfs(nei,vis,gf);
        }
    }
};