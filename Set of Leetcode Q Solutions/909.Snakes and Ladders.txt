struct point{
    int v;
    int dist;
};
class Solution {
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        int N=board.size();
        vector<point> move(N*N+1);
        int k=1;
        point zero; zero.v=1; zero.dist=0;
        int check=0;
        for(int i=N-1;i>=0;i--){
            if(check==0){
                check=1;
                for(int j=0;j<N;j++){
                    move[k].v=board[i][j];
                    move[k].dist=0;
                    k++;
                }
                    
            }else{
                check=0;
                for(int j=N-1;j>=0;j--){
                    move[k].v=board[i][j];
                    move[k].dist=0;
                    k++;
                }
            }
        }
        vector<int> vis(N*N+1);
        queue<point> q;
        q.push(zero);
        vis[0]=1;
        while(!q.empty()){
            int sz=q.size();
            while(sz--){
                auto fr=q.front(); q.pop();
                int idx= fr.v;
                //cout<<idx<<endl;
                int curd=fr.dist;
                if(idx==N*N) break;
                for(int i=1;i<=6 && idx+i<=N*N;i++){
                    point x;
                    int act= move[idx+i].v==-1?idx+i:move[idx+i].v;
             if(!vis[act]){
                        x.dist=curd+1;
                        x.v=act;
                        move[act].dist=curd+1;
                        vis[act]=1;
                        q.push(x);
                    }   
                }
            }
        }
        return vis[N*N]==1?move[N*N].dist:-1;
    }
};