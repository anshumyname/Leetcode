class Solution {
public:
    string removeDuplicates(string s, int k) {
        if(s.length()==1)
            return s;
        stack<char> st;
        int c=0,n=s.length();
        
        unordered_map<char,int> mp;
        for(auto c: s)
            mp[c]++;
        
        int flag=0;
        for(auto it: mp){
            if(it.second>=k){
                flag=1;
                break;
            }
        }
        if(!flag) return s;
        
        for(int i=0;i<n;i++){
           if(st.empty()){
               st.push(s[i]);
               continue;
           }
            if(s[i]==st.top())
                c++;
            else
                c=0;
            
            if(c==(k-1)){
                int x=k-1;
                while(x--)
                    st.pop();
                c=0;
                continue;
            }
            st.push(s[i]);
        }
        
        string ne;
        while(!st.empty()){
            ne+=(st.top()); st.pop();
        }
        reverse(ne.begin(),ne.end());
              
        return removeDuplicates(ne, k);
    }
};