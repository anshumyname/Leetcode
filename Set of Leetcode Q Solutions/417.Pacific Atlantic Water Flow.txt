class Solution {
public:
    int m,n;
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& matrix) {
         m=matrix.size();
        if(!m) return {};
        n=matrix[0].size();
        vector<vector<int>> v1(m,vector<int> (n,0));
        vector<vector<int>> v2(m,vector<int> (n,0));
        
        for(int i=0;i<n;i++)
            if(!v1[0][i])
                dfs(0,i,matrix,v1);
        for(int i=0;i<m;i++)
            if(!v1[i][0])
                dfs(i,0,matrix,v1);
        for(int i=0;i<n;i++)
            if(!v2[m-1][i])
                dfs(m-1,i,matrix,v2);
        for(int i=0;i<m;i++)
            if(!v2[i][n-1])
                dfs(i,n-1,matrix,v2);
        
        vector<vector<int>> ans;
        //print(v1);
        //print(v2);
         for(int i=0;i<m;i++)
             for(int j=0;j<n;j++)
                 if(v1[i][j] && v2[i][j])
                     ans.push_back({i,j});
         return ans;
    }
    void dfs(int x,int y,vector<vector<int>>& matrix,vector<vector<int>>& v){
        if(!isvalid(x,y)) return ;
        if(v[x][y]) return;
        v[x][y]=1;
        vector<vector<int>> dir={{0,1},{1,0},{-1,0},{0,-1}};
        for(int xx=0;xx<4;xx++){
            if(isvalid(x+dir[xx][0],y+dir[xx][1]) && !v[x+dir[xx][0]][y+dir[xx][1]] && matrix[x+dir[xx][0]][y+dir[xx][1]]>=matrix[x][y])
                dfs(x+dir[xx][0],y+dir[xx][1],matrix,v);
        }
    }
    
    bool isvalid(int x,int y){
        return (x>=0 && x<m) && (y>=0 && y<n);
    }
};