class Solution {
public:
    int m,n;
    int largest1BorderedSquare(vector<vector<int>>& grid) {
        m=grid.size();
        if(m) n=grid[0].size();
        vector<vector<int>> top(m,vector<int> (n,0));
        vector<vector<int>> left(m,vector<int> (n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]){
                top[i][j]=(i==0)?1:top[i-1][j]+1;
                left[i][j]=(j==0)?1:left[i][j-1]+1;
              }
            }
        }
        
        int l=min(m,n);
        for(int s=l;s>=1;s--){
            for(int i=0;i<(m-s+1);i++){
                for(int j=0;j<(n-s+1);j++){
                    if(top[i+s-1][j]>=s && top[i+s-1][j+s-1]>=s && left[i][j+s-1]>=s && left[i+s-1][j+s-1]>=s)
                        return s*s;
                }
            }
        }
        
        return 0;
    }
    
};