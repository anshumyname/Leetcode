class Solution {
public:
    int flag=0;
    int cycle=0;
    vector<int> vis;
    bool validateBinaryTreeNodes(int n, vector<int>& left, vector<int>& right) {
            vector<vector<int>> v(n);
        vis.resize(n);
        int c=0;
        for(int i=0;i<n;i++){
            if(left[i]!=-1) {v[i].push_back(left[i]);
                            c++; 
                             v[left[i]].push_back(i);
                            }
            if(right[i]!=-1){ v[i].push_back(right[i]);
                              c++; 
                             v[right[i]].push_back(i);
                            }
        }
        
            if(n!=(c+1))  return false;
            dfs(0,v);
            for(int i=0;i<n;i++){
                if(!vis[i])
                    return false;
            }
        
        
        return true;
    }
    
    void dfs(int st,vector<vector<int>>& gf){
        //cout<<st<<endl;
        // if(vis[st]){
        //     cycle=1;
        //     return;
        // }
        vis[st]=1;
        for(auto x: gf[st])
            if(!vis[x])
                dfs(x,gf);
    }
};