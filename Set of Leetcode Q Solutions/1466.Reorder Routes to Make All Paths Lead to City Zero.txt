class Solution {
public:
    int minReorder(int n, vector<vector<int>>& connections) {
        vector<int> vis(n,0);
        vector<vector<int>> gf(n);
        unordered_map<int,unordered_map<int,int>> mp;
        for(auto e: connections){
            gf[e[0]].push_back(e[1]);
            gf[e[1]].push_back(e[0]);
            mp[e[0]][e[1]]=1;
        }        
       
        return bfs(vis,gf,0,mp);
        
    }
    
    int bfs(vector<int>& vis,vector<vector<int>>& gf,int st,unordered_map<int,unordered_map<int,int>>& mp){
        queue<int> q;
        q.push(st);
        vis[st]=1;
        int c=0;
        while(!q.empty()){
            int sz=q.size();
            while(sz--){
                int fr= q.front();
                q.pop();
                for(auto nei: gf[fr]){
                    if(vis[nei]==0){
                        if(mp[fr][nei])
                            c++;
                        vis[nei]=1;
                        q.push(nei);
                    }
                }
            }
        }
        
        return c;
    }
};