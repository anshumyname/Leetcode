class Solution {
public:
    unordered_map<string,vector<int>> mp;
    vector<int> diffWaysToCompute(string input) {
        return call(input);
    }
    
    vector<int> call(string& t){
        int n=t.length();
        vector<int> ans;
        for(int i=0;i<n;i++){
            char c=t[i];
            if(c=='+' or c=='-' or c=='*'){
                string l= t.substr(0,i);
                string r= t.substr(i+1);
                vector<int> left;
                vector<int> right;
                if(mp.find(l)!=mp.end())
                    left=mp[l];
                else
                    left=call(l);
                
                if(mp.find(r)!=mp.end()){
                    right=mp[r];
                }
                else
                    right=call(r);
                
                for(auto e: left){
                    for(auto f: right){
                        if(c=='+'){
                            ans.push_back(e+f);
                        }
                        if(c=='-')
                            ans.push_back(e-f);
                        if(c=='*')
                            ans.push_back(e*f);
                    }
                }
            }
        }
        if(ans.empty())
            ans={stoi(t)};
        mp[t]=ans;
        return ans;
    }
    
    
};