class Solution {
public:
    bool static comp(pair<string,int> p1, pair<string,int> p2){
        if(p1.second==p2.second)
            return p1.first<p2.first;
        return p1.second<p2.second;
    }
    vector<string> watchedVideosByFriends(vector<vector<string>>& watchedVideos, vector<vector<int>>& friends, int id, int k) {
        vector<int> vis(101,0);
        queue<int> q;
        vis[id]=1;
        q.push(id);
        int lev=1;
        vector<int> kfre;
        while(!q.empty()){
            int sz=q.size(); 
            while(sz--){
                int fr=q.front(); q.pop();
                for(auto nei: friends[fr]){
                    if(!vis[nei]){
                        vis[nei]=1;
                        q.push(nei);
                        if(lev==k)
                            kfre.push_back(nei);
                    }
                }
            } 
            if(lev==k) break;
               lev++;
        }
        
        unordered_map<string,int> mp;
        for(auto i: kfre)
            for(auto m: watchedVideos[i])
                mp[m]++;
        vector<pair<string,int>> vv(mp.begin(),mp.end());
        sort(vv.begin(),vv.end(),comp);
        
        vector<string> finalans;
        
        for(auto m: vv)
            finalans.push_back(m.first);
        
        return finalans;
    }
};