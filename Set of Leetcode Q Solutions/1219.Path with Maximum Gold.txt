class Solution {
public:
    int m,n;
    vector<vector<int>> dir;
    int getMaximumGold(vector<vector<int>>& grid) {
        m=grid.size();
        if(!m) return 0;
        n=grid[0].size();
        vector<vector<int>> v(m,vector<int> (n,0));
        dir={{0,1},{0,-1},{1,0},{-1,0}};
        int globmax=0;
         for(int i=0;i<m;i++)
             for(int j=0;j<n;j++)
                 if(grid[i][j])
                    globmax=max(globmax,maxgold(i,j,grid));
        //cout<<maxgold(0,1,v,grid);
        return globmax;
        
    }
    
    int maxgold(int x,int y,vector<vector<int>>& grid){
        if(!valid(x,y)) return 0;
        if(grid[x][y]<=0) return 0;
        
        int prevsum=0;
        grid[x][y]=-grid[x][y];
      
        for(auto d: dir){
            int nx=x+d[0];
            int ny=y+d[1];
           prevsum=max(prevsum,maxgold(nx,ny,grid));
        }
       grid[x][y]=-grid[x][y];
        return grid[x][y]+prevsum;
    }
    
    bool valid(int x,int y){
        return (x>=0 && x<m) && (y>=0 && y<n);
    }
};