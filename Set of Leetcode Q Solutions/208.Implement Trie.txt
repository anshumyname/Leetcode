struct node {
    bool end;
    vector<node* > v;
};

class Trie {
private: 
     node* nd;
public:
    /** Initialize your data structure here. */
    Trie() { 
        nd=gnode();
    }
    node* gnode(){
        node* k= new node();
        k->end=false;
        k->v.resize(26,NULL);
        return k;
    }
    /** Inserts a word into the trie. */
    void insert(string word) {
        node* tr=nd;
        for(int i=0;i<word.length();i++){
            int index= word[i]-'a';
            if(!tr->v[index]){
                tr->v[index]=gnode();
            }
            tr =tr->v[index];
        }
        tr->end=true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        node* tr=nd;
        for(int i=0;i<word.length();i++){
            int index= word[i]-'a';
            if(!tr->v[index]){
                return false;
            }
            tr =tr->v[index];
        }
        
        return (tr!=NULL && tr->end==true);
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string word) {
        node* tr=nd;
        for(int i=0;i<word.length();i++){
            int index= word[i]-'a';
            if(!tr->v[index]){
                return false;
            }
            tr =tr->v[index];
        }
        
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */