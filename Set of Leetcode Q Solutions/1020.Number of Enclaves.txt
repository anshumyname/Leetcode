class Solution {
public:
    int m,n;
    int flag=0,c=0;
    int numEnclaves(vector<vector<int>>& matrix) {
       m=matrix.size();
        if(!m) return {};
        n=matrix[0].size();
        vector<vector<int>> v(m,vector<int> (n,0));
        
        for(int i=0;i<n;i++)
            if(!v[0][i] && matrix[0][i]==1)
                dfs(0,i,matrix,v);
        for(int i=0;i<m;i++)
            if(!v[i][0] && matrix[i][0]==1)
                dfs(i,0,matrix,v);
        for(int i=0;i<n;i++)
            if(!v[m-1][i] && matrix[m-1][i]==1)
                dfs(m-1,i,matrix,v);
        for(int i=0;i<m;i++)
            if(!v[i][n-1] && matrix[i][n-1]==1)
                dfs(i,n-1,matrix,v);
        
        flag=1;
        
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                if(!v[i][j] && matrix[i][j]==1){
                    dfs(i,j,matrix,v);
                }
       
         return c;  
    }
    
     void dfs(int x,int y,vector<vector<int>>& matrix,vector<vector<int>>& v){
        if(!isvalid(x,y)) return ;
        if(v[x][y]) return;
        v[x][y]=1;
         if(flag) c++;
         if(!flag) matrix[x][y]=-1;
        vector<vector<int>> dir={{0,1},{1,0},{-1,0},{0,-1}};
        for(int xx=0;xx<4;xx++){
            if(isvalid(x+dir[xx][0],y+dir[xx][1]) && !v[x+dir[xx][0]][y+dir[xx][1]] && matrix[x+dir[xx][0]][y+dir[xx][1]]==1)
                dfs(x+dir[xx][0],y+dir[xx][1],matrix,v);
        }
    }
    
    bool isvalid(int x,int y){
        return (x>=0 && x<m) && (y>=0 && y<n);
    }
};