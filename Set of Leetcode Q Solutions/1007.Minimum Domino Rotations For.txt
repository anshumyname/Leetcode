class Solution {
public:
    int minDominoRotations(vector<int>& A, vector<int>& B) {
        unordered_map<int,int> mpa;
        unordered_map<int,int> mpb;
        vector<pair<int,bool>> maxes;
        int ele=0,count=0;
        for(auto k: A) mpa[k]++; for(auto k: B) mpb[k]++;
        for(auto it :mpa){
            if(it.second>count)
                count=max(it.second,count);
        }
        for(auto it :mpb){
                count=max(count,it.second);
        }
        for(auto it: mpa){
            if(it.second==count){
                maxes.push_back({it.first,true});
            }
        }
        for(auto it: mpb){
            if(it.second==count)
                maxes.push_back({it.first,false});
        }
      //  cout<<maxes[0].second;
        for(int i=0;i<maxes.size();i++){
            vector<int> temp=maxes[i].second?A:B;
            int c=0; bool tobreak=false;
            for(int j=0;j<temp.size();j++){
                if(temp[j]!=maxes[i].first){
                    if(maxes[i].second==true && B[j]==maxes[i].first){
                        c++;
                    }else if(maxes[i].second==false && A[j]==maxes[i].first){
                        c++;
                    }
                    else{
                        maxes[i].first=-1;
                        tobreak=true;
                        break;
                    }
                }
               
            }
             if(!tobreak) {
                    maxes[i].first=c;
                }
        }
        
        int ans=A.size()+1;
        for(auto m : maxes)
            if(m.first>=0)
                ans=min(ans,m.first);
        
        
        return ans==A.size()+1?-1:ans;
                
        
    }
};