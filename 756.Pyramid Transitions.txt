class Solution {
public:
    vector<char> targets;
    int flag=0;
    unordered_map<string,int> mp;
    bool pyramidTransition(string bottom, vector<string>& allowed) {
        if(!flag){ flag=1; targets={'A','B','C','D','E','F','G'}; 
                 for(auto a: allowed)
                     mp[a]=1;
        }
        if(bottom.length()==1) 
            return true;
        vector<string> getvalid;
        helper(bottom.length()-1,"",bottom,allowed,getvalid,0);
        for(auto x: getvalid){
            if(pyramidTransition(x,allowed))
                return true;
        }
        return false;
    }
    
    void helper(int k,string t,string bottom,vector<string>& allowed,vector<string>& valid,int i){
        if(t.length()==k || i==(bottom.length()-1)){
            valid.push_back(t);
        }
        for(auto c: targets){
            t+=c;
            string check;
            check.push_back(bottom[i]);
            check.push_back(bottom[i+1]);
            check.push_back(c);
            
            if(mp[check]){
                helper(k,t,bottom,allowed,valid,i+1);
            }
            t.pop_back();
        }
    }
};