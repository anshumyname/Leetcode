class Solution {
public:
    int n,m;
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
         m=grid.size();
        if(!m) return 0;
        n=grid[0].size();
        queue<pair<int,int>> q;
        vector<vector<int>> vis(m,vector<int> (n,0));
        if(grid[0][0]==1) return -1;
        q.push({0,0});
        vis[0][0]=1;
        int time=0;
         while(!q.empty()){
            int sz=q.size();
                while(sz--){    
                auto fr= q.front(); q.pop();
                int x=fr.first;
                int y=fr.second;
                if(x==m-1 && y==n-1) return time+1;
                vector<vector<int>> dir={{0,1},{1,0},{-1,0},{0,-1},{1,1},{1,-1},{-1,1},{-1,-1}};
                for(int xx=0;xx<8;xx++){
                    int nx=x+dir[xx][0];
                    int ny=y+dir[xx][1];
                    if(isvalid(nx,ny) && !vis[nx][ny] && grid[nx][ny]==0){
                        vis[nx][ny]=1;
                        q.push({nx,ny});
                    }
                     
                }
            }
            time++;
        }
        return -1;
    }
    bool isvalid(int x,int y){
        return (x>=0 && x<m) && (y>=0 && y<n);
    }
};