/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(!head || !head->next) return head;
        ListNode* slow=head;
        ListNode* fast=head->next;
        while(fast && fast->next){
            slow=slow->next;
            fast=fast->next->next;
        }
        
        ListNode* temp=slow->next;
        slow->next=NULL;
        ListNode* h1=sortList(head);
        ListNode* h2=sortList(temp);
        
        return mergeTwoLists(h1,h2);
    }
    
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1 || !l2)
            return l1==NULL?l2:l1;
        
        ListNode* temp=NULL;
        if(l1->val>=l2->val){
            l2->next=mergeTwoLists(l1,l2->next);
            return l2;
        }
        else
        {
            l1->next=mergeTwoLists(l1->next,l2);
            return l1;
        }   
    }
};