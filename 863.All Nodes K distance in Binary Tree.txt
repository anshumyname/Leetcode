/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    unordered_map<TreeNode*,TreeNode*> mp;
    vector<int> vis;
    vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {
        vis.resize(501,0);
        if(!root) return {};
        queue<TreeNode*> q;
        mp[root]=NULL;
        helper(root);
        q.push(target);
        int level=0;
        vis[target->val]=1;
        vector<int> v;
        while(!q.empty()){
            int sz=q.size();
            while(sz--){
                auto fr=q.front();
                q.pop();
                if(level==K)
                    v.push_back(fr->val);
                if(mp[fr] && !vis[mp[fr]->val]){ q.push(mp[fr]);  vis[mp[fr]->val]=1;}
                if(fr->left && !vis[fr->left->val]){ q.push(fr->left); vis[fr->left->val]=1;}
                if(fr->right && !vis[fr->right->val]){ q.push(fr->right); vis[fr->right->val]=1;}
            }
            level++;
            if(level==K+1)
                break;
        }
        return v;
        
    }
    
    void helper(TreeNode* root){
        if(!root) return;
        if(root->left) {
            mp[root->left]=root;
            helper(root->left);
        }
        if(root->right){
            mp[root->right]=root;
            helper(root->right);
        } 
    }
};